//
//  SettingsViewController.swift
//  BaseStructoriOSUIKit
//
//  Created by sahapap on 8/8/2568 BE.
//

import UIKit
import Combine

class SettingsViewController: UIViewController, NavigationConfigurable {

    // MARK: - Properties
    weak var coordinator: SettingsCoordinator?
    let viewModel: SettingsViewModel  // Changed to internal access
    private var cancellables = Set<AnyCancellable>()
    
    // MARK: - Initialization
    init(viewModel: SettingsViewModel) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    private lazy var tableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .insetGrouped)
        tableView.backgroundColor = .systemGroupedBackground
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "Cell")
        tableView.register(SettingsCell.self, forCellReuseIdentifier: "SettingsCell")
        tableView.translatesAutoresizingMaskIntoConstraints = false
        return tableView
    }()
    
    private let settingsData: [SettingsSection] = [
        SettingsSection(title: "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", items: [
            SettingsItem(title: "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", icon: "person.circle", action: .profile),
            SettingsItem(title: "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", icon: "bell", action: .notifications),
            SettingsItem(title: "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", icon: "lock.shield", action: .privacy)
        ]),
        SettingsSection(title: "‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô", items: [
            SettingsItem(title: "‡∏ò‡∏µ‡∏°", icon: "paintbrush", action: .theme),
            SettingsItem(title: "‡∏†‡∏≤‡∏©‡∏≤", icon: "globe", action: .language),
            SettingsItem(title: "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö", icon: "info.circle", action: .about)
        ]),
        SettingsSection(title: "‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô", items: [
            SettingsItem(title: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", icon: "questionmark.circle", action: .help),
            SettingsItem(title: "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤", icon: "envelope", action: .contact),
            SettingsItem(title: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", icon: "rectangle.portrait.and.arrow.right", action: .logout)
        ])
    ]
    
    var navigationBarStyle: NavigationBarStyle {
        return .default
    }
    
    var navigationConfiguration: NavigationConfiguration {
        return NavigationBuilder()
            .title("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
            .style(.transparent) // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ default style ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏õ‡∏Å‡∏ï‡∏¥
            .largeTitleMode(.always)
            .rightButton(image: UIImage(systemName: "person.circle.fill")) { [weak self] in
                self?.profileButtonTapped()
            }
            .leftButton(image: UIImage(systemName: "paintbrush.pointed.fill")) { [weak self] in
                self?.themeButtonTapped()
            }
            .build()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        configureNavigationBar()
        
        // ‚úÖ Force navigation setup ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        //setupNavigationBarManually()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        print("after ter test \(viewModel.userService.getCurrentUser()?.name)")
        
        // ‚úÖ Force navigation setup ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà view ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
       //setupNavigationBarManually()
       
        // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° entrance animation ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        animateTableViewEntrance()
    }
    
    // ‚ú® Animate table view entrance - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á position ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    private func animateTableViewEntrance() {
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ table view load ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) { [weak self] in
            guard let self = self else { return }
            
            // ‡πÄ‡∏Å‡πá‡∏ö original transforms ‡πÅ‡∏•‡∏∞ alpha ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
            var originalStates: [(UITableViewCell, CGAffineTransform, CGFloat)] = []
            
            // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° cells ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö animation
            for section in 0..<self.tableView.numberOfSections {
                for row in 0..<self.tableView.numberOfRows(inSection: section) {
                    let indexPath = IndexPath(row: row, section: section)
                    if let cell = self.tableView.cellForRow(at: indexPath) {
                        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
                        originalStates.append((cell, cell.transform, cell.alpha))
                        
                        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö animation
                        cell.transform = CGAffineTransform(translationX: -50, y: 0)
                        cell.alpha = 0
                    }
                }
            }
            
            // Animate cells ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏±‡∏ô
            var delay: TimeInterval = 0
            for (cell, originalTransform, originalAlpha) in originalStates {
                UIView.animate(
                    withDuration: 0.6,
                    delay: delay,
                    usingSpringWithDamping: 0.8,
                    initialSpringVelocity: 0.4,
                    options: [.allowUserInteraction, .curveEaseOut]
                ) {
                    cell.transform = originalTransform
                    cell.alpha = originalAlpha
                } completion: { _ in
                    // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ reset ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
                    cell.transform = .identity
                    cell.alpha = 1.0
                }
                delay += 0.08
            }
        }
    }

    private func setupUI() {
        view.backgroundColor = .systemGroupedBackground
        
        // ‚úÖ ‡∏•‡∏î gradient effect ‡πÉ‡∏´‡πâ‡πÄ‡∏ö‡∏≤‡∏•‡∏á
        setupSubtleGradientBackground()
        
        view.addSubview(tableView)
        
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô normal background
        tableView.backgroundColor = .systemGroupedBackground
    }
    
    // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° gradient effect ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ - ‡πÅ‡∏ï‡πà‡πÄ‡∏ö‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    private func setupSubtleGradientBackground() {
        let gradientLayer = CAGradientLayer()
        gradientLayer.colors = [
            UIColor.systemBackground.cgColor,
            UIColor.systemBlue.withAlphaComponent(0.05).cgColor,  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0.03 ‡πÄ‡∏õ‡πá‡∏ô 0.05
            UIColor.systemPurple.withAlphaComponent(0.03).cgColor // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0.02 ‡πÄ‡∏õ‡πá‡∏ô 0.03
        ]
        gradientLayer.locations = [0.0, 0.7, 1.0]
        gradientLayer.startPoint = CGPoint(x: 0, y: 0)
        gradientLayer.endPoint = CGPoint(x: 1, y: 1)
        gradientLayer.frame = view.bounds
        
        view.layer.insertSublayer(gradientLayer, at: 0)
        
        // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° subtle gradient animation ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        let animation = CABasicAnimation(keyPath: "colors")
        animation.duration = 4.0 // ‡∏ä‡πâ‡∏≤‡∏•‡∏á ‡∏à‡∏≤‡∏Å 3.0 ‡πÄ‡∏õ‡πá‡∏ô 4.0
        animation.fromValue = gradientLayer.colors!
        animation.toValue = [
            UIColor.systemPurple.withAlphaComponent(0.05).cgColor,
            UIColor.systemBlue.withAlphaComponent(0.03).cgColor,
            UIColor.systemBackground.cgColor
        ]
        animation.repeatCount = .infinity
        animation.autoreverses = true
        gradientLayer.add(animation, forKey: "gradientAnimation")
    }
    
    // ‚úÖ Manual navigation setup ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    private func setupNavigationBarManually() {
        // Setup large title
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationItem.largeTitleDisplayMode = .always
        title = "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"
        
        // Setup right button (Profile)
        let profileButton = UIBarButtonItem(
            image: UIImage(systemName: "person.circle.fill"),
            style: .plain,
            target: self,
            action: #selector(profileButtonTapped)
        )
        profileButton.tintColor = .systemBlue
        navigationItem.rightBarButtonItem = profileButton
        
        // Setup left button (Theme)
        let themeButton = UIBarButtonItem(
            image: UIImage(systemName: "paintbrush.pointed.fill"),
            style: .plain,
            target: self,
            action: #selector(themeButtonTapped)
        )
        themeButton.tintColor = .systemBlue
        navigationItem.leftBarButtonItem = themeButton
        
        // Ensure navigation bar is visible
        navigationController?.setNavigationBarHidden(false, animated: false)
    }
    
    // ‚úÖ Profile button action with animation
    @objc private func profileButtonTapped() {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° haptic feedback
        let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
        impactFeedback.impactOccurred()
        
        let alert = UIAlertController(title: "üë§ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", message: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", preferredStyle: .actionSheet)
        
        alert.addAction(UIAlertAction(title: "‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", style: .default) { _ in
            //self.coordinator?.showProfile()
        })
        
        alert.addAction(UIAlertAction(title: "üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", style: .default) { _ in
            self.showUsageStats()
        })
        
        alert.addAction(UIAlertAction(title: "üîê ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", style: .default) { _ in
            self.showSecuritySettings()
        })
        
        alert.addAction(UIAlertAction(title: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: .cancel))
        
        if let popover = alert.popoverPresentationController {
            popover.barButtonItem = navigationItem.rightBarButtonItem
        }
        
        present(alert, animated: true)
    }
    
    // ‚úÖ Theme button action with wow effect
    @objc private func themeButtonTapped() {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° haptic feedback
        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)
        impactFeedback.impactOccurred()
        
        let alert = UIAlertController(title: "üé® ‡∏ò‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏µ", message: "‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏£‡∏π‡∏õ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏≠‡∏õ", preferredStyle: .actionSheet)
        
        alert.addAction(UIAlertAction(title: "üåÖ ‡∏ò‡∏µ‡∏°‡∏≠‡πà‡∏≠‡∏ô", style: .default) { _ in
            self.applyTheme(.light)
        })
        
        alert.addAction(UIAlertAction(title: "üåô ‡∏ò‡∏µ‡∏°‡∏°‡∏∑‡∏î", style: .default) { _ in
            self.applyTheme(.dark)
        })
        
        alert.addAction(UIAlertAction(title: "üåà ‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏£‡∏∏‡πâ‡∏á", style: .default) { _ in
            self.applyTheme(.rainbow)
        })
        
        alert.addAction(UIAlertAction(title: "‚ú® ‡∏ò‡∏µ‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", style: .default) { _ in
            self.applyTheme(.automatic)
        })
        
        alert.addAction(UIAlertAction(title: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: .cancel))
        
        if let popover = alert.popoverPresentationController {
            popover.barButtonItem = navigationItem.leftBarButtonItem
        }
        
        present(alert, animated: true)
    }
    
    // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° theme enum
    enum AppTheme {
        case light, dark, rainbow, automatic
    }
    
    // ‚ú® Apply theme with animation
    private func applyTheme(_ theme: AppTheme) {
        let feedbackGenerator = UINotificationFeedbackGenerator()
        
        UIView.transition(with: view, duration: 0.5, options: .transitionCrossDissolve) {
            switch theme {
            case .light:
                self.overrideUserInterfaceStyle = .light
            case .dark:
                self.overrideUserInterfaceStyle = .dark
            case .rainbow:
                self.setupRainbowTheme()
            case .automatic:
                self.overrideUserInterfaceStyle = .unspecified
            }
        } completion: { _ in
            feedbackGenerator.notificationOccurred(.success)
            self.showThemeChangeMessage(theme)
        }
    }
    
    // ‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á rainbow theme effect
    private func setupRainbowTheme() {
        let rainbowLayer = CAGradientLayer()
        rainbowLayer.colors = [
            UIColor.systemRed.cgColor,
            UIColor.systemOrange.cgColor,
            UIColor.systemYellow.cgColor,
            UIColor.systemGreen.cgColor,
            UIColor.systemBlue.cgColor,
            UIColor.systemIndigo.cgColor,
            UIColor.systemPurple.cgColor
        ]
        rainbowLayer.locations = [0.0, 0.16, 0.33, 0.5, 0.66, 0.83, 1.0]
        rainbowLayer.startPoint = CGPoint(x: 0, y: 0)
        rainbowLayer.endPoint = CGPoint(x: 1, y: 1)
        rainbowLayer.frame = view.bounds
        
        view.layer.insertSublayer(rainbowLayer, at: 0)
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° animation
        let animation = CABasicAnimation(keyPath: "transform.rotation")
        animation.duration = 10.0
        animation.fromValue = 0
        animation.toValue = 2 * Double.pi
        animation.repeatCount = .infinity
        rainbowLayer.add(animation, forKey: "rainbowRotation")
    }
    
    private func showUsageStats() {
        let alert = UIAlertController(title: "üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", message: "‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß 42 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°!", style: .default))
        present(alert, animated: true)
    }
    
    private func showSecuritySettings() {
        let alert = UIAlertController(title: "üîê ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", message: "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Face ID", style: .default))
        alert.addAction(UIAlertAction(title: "‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", style: .default))
        alert.addAction(UIAlertAction(title: "‡∏õ‡∏¥‡∏î", style: .cancel))
        present(alert, animated: true)
    }
    
    private func showThemeChangeMessage(_ theme: AppTheme) {
        let message: String
        switch theme {
        case .light: message = "üåÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏µ‡∏°‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß!"
        case .dark: message = "üåô ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏µ‡∏°‡∏°‡∏∑‡∏î‡πÅ‡∏•‡πâ‡∏ß!"
        case .rainbow: message = "üåà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏£‡∏∏‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß!"
        case .automatic: message = "‚ú® ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏µ‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!"
        }
        
        let alert = UIAlertController(title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°!", style: .default))
        present(alert, animated: true)
    }
    
    private func showResetConfirmation() {
        let alert = UIAlertController(
            title: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô",
            message: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï", style: .destructive) { _ in
            // Handle reset
            self.showSuccessMessage("‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        })
        
        alert.addAction(UIAlertAction(title: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: .cancel))
        
        present(alert, animated: true)
    }
    
    private func exportData() {
        let activityController = UIActivityViewController(
            activityItems: ["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å BaseStructor iOS App"],
            applicationActivities: nil
        )
        present(activityController, animated: true)
    }
    
    private func showSuccessMessage(_ message: String) {
        let alert = UIAlertController(title: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "‡∏ï‡∏Å‡∏•‡∏á", style: .default))
        present(alert, animated: true)
    }
}

// MARK: - UITableViewDataSource
extension SettingsViewController: UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return settingsData.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return settingsData[section].items.count
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return settingsData[section].title
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "SettingsCell", for: indexPath) as! SettingsCell
        let item = settingsData[indexPath.section].items[indexPath.row]
        cell.configure(with: item)
        return cell
    }
}

// MARK: - UITableViewDelegate
extension SettingsViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° haptic feedback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î cell
        let impactFeedback = UIImpactFeedbackGenerator(style: .light)
        impactFeedback.impactOccurred()
        
        // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° cell bounce animation
        if let cell = tableView.cellForRow(at: indexPath) {
            UIView.animate(withDuration: 0.1, animations: {
                cell.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)
            }) { _ in
                UIView.animate(withDuration: 0.1) {
                    cell.transform = .identity
                }
            }
        }
        
        let item = settingsData[indexPath.section].items[indexPath.row]
        handleSettingsAction(item.action)
    }
    
    // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° scroll delegate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parallax effect - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç position
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offsetY = scrollView.contentOffset.y
        
        // ‚ú® Parallax effect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö navigation bar (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
        if offsetY > 0, let navigationBar = navigationController?.navigationBar {
            let alpha = min(1.0, max(0.0, offsetY / 200.0)) // ‡πÄ‡∏û‡∏¥‡πà‡∏° threshold ‡∏à‡∏≤‡∏Å 100 ‡πÄ‡∏õ‡πá‡∏ô 200
            navigationBar.alpha = 1.0 - (alpha * 0.1) // ‡∏•‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0.1 ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å
        }
        
        // ‚ú® ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á depth effect ‡πÉ‡∏´‡πâ smooth ‡πÅ‡∏•‡∏∞ position ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        guard offsetY >= 0 else { return } // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ scroll ‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏ú‡∏¥‡∏î
        
        for cell in tableView.visibleCells {
            if let indexPath = tableView.indexPath(for: cell) {
                let cellFrame = tableView.rectForRow(at: indexPath)
                // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì position ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                let cellTop = cellFrame.origin.y - offsetY
                let visibleHeight = scrollView.bounds.height
                
                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì distance ‡∏à‡∏≤‡∏Å‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
                let cellCenterY = cellTop + cellFrame.height / 2
                let screenCenterY = visibleHeight / 2
                let distanceFromCenter = abs(cellCenterY - screenCenterY)
                let normalizedDistance = min(1.0, distanceFromCenter / (visibleHeight / 2))
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á scale effect ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≠‡∏ô‡∏•‡∏á
                let scale = max(0.95, 1.0 - normalizedDistance * 0.05) // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á alpha effect ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≠‡∏ô‡∏•‡∏á  
                let alpha = max(0.85, 1.0 - normalizedDistance * 0.15) // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å
                
                // ‡πÉ‡∏ä‡πâ animation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ smooth
                UIView.animate(withDuration: 0.1, delay: 0, options: [.allowUserInteraction, .beginFromCurrentState]) {
                    cell.transform = CGAffineTransform(scaleX: scale, y: scale)
                    cell.alpha = alpha
                }
            }
        }
    }
    
    // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° header animation ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) {
        if let headerView = view as? UITableViewHeaderFooterView {
            headerView.textLabel?.textColor = .systemBlue
            headerView.textLabel?.font = UIFont.systemFont(ofSize: 16, weight: .semibold)
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° entrance animation ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤ ‡πÜ
            headerView.alpha = 0
            headerView.transform = CGAffineTransform(translationX: -30, y: 0) // ‡∏•‡∏î‡∏à‡∏≤‡∏Å -50
            
            UIView.animate(withDuration: 0.4, delay: 0.05) { // ‡∏•‡∏î duration ‡πÅ‡∏•‡∏∞ delay
                headerView.alpha = 1.0
                headerView.transform = .identity
            }
        }
    }
    
    // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° cell appearance animation - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç position
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ animate cells ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        guard cell.alpha == 0 || cell.transform != .identity else {
            return
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° entrance animation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cells ‡πÉ‡∏´‡∏°‡πà
        cell.alpha = 0
        cell.transform = CGAffineTransform(translationX: 30, y: 0) // ‡∏•‡∏î‡∏£‡∏∞‡∏¢‡∏∞
        
        UIView.animate(
            withDuration: 0.5,
            delay: 0.02 * Double(indexPath.row), // ‡∏•‡∏î delay
            usingSpringWithDamping: 0.9, // ‡πÄ‡∏û‡∏¥‡πà‡∏° damping
            initialSpringVelocity: 0.2, // ‡∏•‡∏î velocity
            options: [.allowUserInteraction, .curveEaseOut]
        ) {
            cell.alpha = 1.0
            cell.transform = .identity
        } completion: { _ in
            // ‚úÖ ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ reset ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            cell.transform = .identity
            cell.alpha = 1.0
        }
        
        // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á logout cell effect
        if indexPath.section == 2 && indexPath.row == 2 { // Logout cell
            cell.backgroundColor = UIColor.systemRed.withAlphaComponent(0.03) // ‡∏•‡∏î‡∏•‡∏á‡∏°‡∏≤‡∏Å
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° subtle glow animation
            UIView.animate(withDuration: 4.0, delay: 1.0, options: [.repeat, .autoreverse, .allowUserInteraction]) {
                cell.backgroundColor = UIColor.systemRed.withAlphaComponent(0.08) // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á
            }
        }
    }
    
    private func handleSettingsAction(_ action: SettingsAction) {
        switch action {
        case .profile:
            showAlert(title: "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", message: "‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        case .notifications:
            showAlert(title: "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", message: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        case .privacy:
            showAlert(title: "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", message: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß")
        case .theme:
            showThemeSelector()
        case .language:
            showAlert(title: "‡∏†‡∏≤‡∏©‡∏≤", message: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô")
        case .about:
            coordinator?.showAboutScreen()
        case .help:
            showAlert(title: "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", message: "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
        case .contact:
            showAlert(title: "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤", message: "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠")
        case .logout:
            showLogoutConfirmation()
        }
    }
    
    private func showAlert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "‡∏ï‡∏Å‡∏•‡∏á", style: .default))
        present(alert, animated: true)
    }
    
    private func showThemeSelector() {
        let alert = UIAlertController(title: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏µ‡∏°", message: nil, preferredStyle: .actionSheet)
        
        alert.addAction(UIAlertAction(title: "‡∏ò‡∏µ‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á", style: .default) { _ in
            self.overrideUserInterfaceStyle = .light
        })
        
        alert.addAction(UIAlertAction(title: "‡∏ò‡∏µ‡∏°‡∏°‡∏∑‡∏î", style: .default) { _ in
            self.overrideUserInterfaceStyle = .dark
        })
        
        alert.addAction(UIAlertAction(title: "‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö", style: .default) { _ in
            self.overrideUserInterfaceStyle = .unspecified
        })
        
        alert.addAction(UIAlertAction(title: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: .cancel))
        
        if let popover = alert.popoverPresentationController {
            popover.sourceView = tableView
            popover.sourceRect = CGRect(x: view.bounds.midX, y: view.bounds.midY, width: 0, height: 0)
        }
        
        present(alert, animated: true)
    }
    
    private func showAboutApp() {
        let alert = UIAlertController(
            title: "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ",
            message: "BaseStructor iOS UIKit\n‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 1.0.0\n‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ MVVM-C Pattern",
            preferredStyle: .alert
        )
        alert.addAction(UIAlertAction(title: "‡∏ï‡∏Å‡∏•‡∏á", style: .default))
        present(alert, animated: true)
    }
    
    private func showLogoutConfirmation() {
        let alert = UIAlertController(
            title: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
            message: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö?",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", style: .destructive) { _ in
            self.showSuccessMessage("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        })
        
        alert.addAction(UIAlertAction(title: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: .cancel))
        
        present(alert, animated: true)
    }
}

// MARK: - Models
struct SettingsSection {
    let title: String
    let items: [SettingsItem]
}

struct SettingsItem {
    let title: String
    let icon: String
    let action: SettingsAction
}

enum SettingsAction {
    case profile, notifications, privacy, theme, language, about, help, contact, logout
}

// MARK: - Custom Cell
class SettingsCell: UITableViewCell {
    
    private let iconImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.contentMode = .scaleAspectFit
        imageView.tintColor = .systemBlue
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont.systemFont(ofSize: 16, weight: .medium)
        label.textColor = .label
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        setupUI()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    private func setupUI() {
        accessoryType = .disclosureIndicator
        
        contentView.addSubview(iconImageView)
        contentView.addSubview(titleLabel)
        
        NSLayoutConstraint.activate([
            iconImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
            iconImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
            iconImageView.widthAnchor.constraint(equalToConstant: 24),
            iconImageView.heightAnchor.constraint(equalToConstant: 24),
            
            titleLabel.leadingAnchor.constraint(equalTo: iconImageView.trailingAnchor, constant: 12),
            titleLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16)
        ])
    }
    
    func configure(with item: SettingsItem) {
        iconImageView.image = UIImage(systemName: item.icon)
        titleLabel.text = item.title
    }
}
